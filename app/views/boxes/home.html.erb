<div class="main-container">
  <div class ="main-heading">
      <h2> PickPack </h2>
  </div>

  <div class="to-pack-container">
      <h2>Orders to Pack</h2>
    <div class="to-pack-order">
      <%#= iterate over the instance variable orders, that contains all our orders %>
      <% @orders.each do |order| %>
      <%#= each order, print the order number as a heading %>
        <h4>Order #<%= order.number %></h4>
        <%#= If their are no items, print that theres no items %>
          <% if order.line_items == nil %>
            <h4> there are no items </h4>
          <% else %>
          <div class="order-and-button">
          <div class="to-pack-item">
          <%#= Otherwise, initialise a blank items array %>
            <% items = [] %>
            <%#= Iterate over the line items as part of the order %>
              <% order.line_items.each do |item| %>
              <%#= Print the title %>
                <p><%= item[:sellable][:product_title] %></p>
                <%#= Assign the height, width and depth to variables %>
                <% a = item[:sellable][:measurement_attributes][:height] %>
                <% b = item[:sellable][:measurement_attributes][:width] %>
                <% c = item[:sellable][:measurement_attributes][:depth] %>
                <%#= Duplicate the items if there is more than one %>
                <% item[:quantity].times do %>
                <%#= dimensions have to be a specific format to work %>
                  <% items << { :dimensions => [a,b,c]}  %>
                <% end %>

                <% items %>

            <% end %>
            <%#= Use the gem to find the smallest container %>
            <% container = EasyBoxPacker.find_smallest_container(items: items) %>
            <% container %>

            <%#= Compare the smallest container to what we have in our DB %>
            <% the_box = Box.find { |x| x.length > container[0] && x.width > container[1] && x.height > container[2]} %>
            <%#= Print the package %>
            <p><%= the_box.package %></p>

          </div>
          <a class="tick-btn" href="#">âœ“</a>
        </div>
        <% end %>
      <% end %>
    </div>
    <li><%= link_to "Our Learnings", learnings_path %></li>
<!--     <button id="click">Hello</button> -->
  </div>
</div>


<!--     items = []
    # x = order.line_items[:quantity]
    # x.times do
    order.line_items.each do |item|
    a = item[:sellable][:measurement_attributes][:height]
    b = item[:sellable][:measurement_attributes][:width]
    c = item[:sellable][:measurement_attributes][:depth]
    items << {dimensions => [a,b,c]}
    end
    container = EasyBoxPacker.find_smallest_container( items )
    @container = container
  end
 -->

<!-- <h3><%#=container%></h3> -->

<!--
  <script type="text/javascript">
    let dataStuff = <%= @order %>
    console.log(dataStuff)
    const url = "https://eu.api.3dbinpacking.com/packer/packIntoMany"
    const data = {
   "bins": [
      {
         "w": 5,
         "h": 5,
         "d": 5,
         "max_wg": 0,
         "id": "Bin1"
      },
      {
         "w": 3,
         "h": 3,
         "d": 3,
         "max_wg": 100,
         "id": "Bin2"
      }
   ],
   "items": [
      {
         "w": 5,
         "h": 3,
         "d": 2,
         "q": 2,
         "vr": 1,
         "wg": 0,
         "id": "Item1"
      },
      {
         "w": 3,
         "h": 3,
         "d": 3,
         "q": 3,
         "vr": 1,
         "wg": 0,
         "id": "Item2"
      }
   ],
   "username": "siddav83",
   "api_key": "5143a7077262537352928774f56240d4",
}

    const sendBoxParams = () => {
      fetch(url, {
        method: "POST",
        body: JSON.stringify(data),
      })
        .then(response => response.json())
        .then((data) => {
          console.log(data);
    })};
        const click = document.getElementById("click");
        click.addEventListener('click', sendBoxParams())

  </script> -->

<!-- <script>
fetch("/notifications.json")
  .then(response => response.json())
    .then(data => {
      let counter = 0
      data.forEach(notification => {
      const element = `<a class="dropdown-item" data-remote="true" rel="nofollow" data-method="post" href="/notifications/${notification.id}/mark_as_read">${notification.actor} ${notification.action}<i class="fas fa-times-circle"></i></a>`
      document.getElementById("navbar-dropdown-text").insertAdjacentHTML("beforeend", element)
      counter += 1
      })
      const counterHTML =  `<h3>${counter}</h3>`
      document.getElementById("dropdown-heading").insertAdjacentHTML("beforeend", counterHTML)
    })
</script> -->
